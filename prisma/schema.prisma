// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model System_Users {
  id        String       @id @default(cuid())
  name      String
  email     String       @unique
  password  String
  role      Roles
  roleId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?
  orders    Orders[]
  stockLogs Stock_Logs[]
}

enum Roles {
  admin
  warehouse_staff
  cashier_staff
  juice_maker
}

model Vip_Customers {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  phone     String
  status    Statuses
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  orders    Orders[]
}

enum Statuses {
  active
  inactive
}

model Categories {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  products    Products[]
}

model Products {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  category    Categories    @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  inventory   Inventories?
  orderItems  Order_Items[]
}

model Inventories {
  id        String       @id @default(cuid())
  product   Products     @relation(fields: [productId], references: [id])
  productId String       @unique
  quantity  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?
  stockLogs Stock_Logs[]
}

model Orders {
  id         String         @id @default(cuid())
  customer   Vip_Customers? @relation(fields: [customerId], references: [id])
  customerId String?
  status     Order_Statuses
  createdBy  System_Users   @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?
  orderItems Order_Items[]
}

enum Order_Statuses {
  waiting
  cooking
  ready_to_pick
  done
  cancelled
}

model Order_Items {
  id        String    @id @default(cuid())
  order     Orders    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Products  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  subtotal  Decimal
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Stock_Logs {
  id              String       @id @default(cuid())
  inventory       Inventories  @relation(fields: [inventoryId], references: [id])
  inventoryId     String
  changeType      String
  quantityChanged Int
  changedBy       System_Users @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?
}

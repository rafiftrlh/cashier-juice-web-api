// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SystemUser {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  orders    Order[]
  stockLogs StockLog[]
}

model Role {
  id        String       @id @default(cuid())
  roleName  String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?
  users     SystemUser[]
}

model VipCustomer {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  phone     String
  status    Status
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  orders    Order[]
}

enum Status {
  active
  inactive
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  products    Product[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  inventory   Inventory?
  orderItems  OrderItem[]
}

model Inventory {
  id        String     @id @default(cuid())
  product   Product    @relation(fields: [productId], references: [id])
  productId String     @unique
  quantity  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  stockLogs StockLog[]
}

model Order {
  id         String       @id @default(cuid())
  customer   VipCustomer? @relation(fields: [customerId], references: [id])
  customerId String?
  status     OrderStatus
  createdBy  SystemUser   @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  orderItems OrderItem[]
}

enum OrderStatus {
  waiting
  cooking
  ready_to_pick
  done
  cancelled
}

model OrderItem {
  id        String    @id @default(cuid())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  subtotal  Decimal
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model StockLog {
  id              String     @id @default(cuid())
  inventory       Inventory  @relation(fields: [inventoryId], references: [id])
  inventoryId     String
  changeType      String
  quantityChanged Int
  changedBy       SystemUser @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?
}
